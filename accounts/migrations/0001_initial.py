# Generated by Django 4.2.4 on 2023-08-09 23:25

import uuid

import accelerator.models.fields
import accelerator.users.utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import accounts.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permission",
            fields=[],
            options={
                "managed": False,
                "proxy": True,
            },
            bases=("auth.permission", models.Model),
            managers=[
                ("objects", django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "uuid",
                    accelerator.models.fields.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                (
                    "is_localhost",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="localhost?"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        verbose_name="date joined",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "group_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="auth.group",
                    ),
                ),
                (
                    "uuid",
                    accelerator.models.fields.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                (
                    "is_localhost",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="localhost?"
                    ),
                ),
                (
                    "added_on",
                    accelerator.models.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created at",
                    ),
                ),
                (
                    "modified_on",
                    accelerator.models.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="updated at",
                    ),
                ),
                (
                    "description",
                    accelerator.models.fields.TextNullField(
                        blank=True,
                        default=None,
                        max_length=500,
                        null=True,
                        verbose_name="description",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("auth.group", models.Model),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="SignUp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    accelerator.models.fields.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                (
                    "is_localhost",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="localhost?"
                    ),
                ),
                (
                    "added_on",
                    accelerator.models.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created at",
                    ),
                ),
                (
                    "modified_on",
                    accelerator.models.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, verbose_name="verified"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=50, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=50, verbose_name="last name"),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[accounts.models.unique_sign_up_username],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[accounts.models.unique_sign_up_email],
                        verbose_name="email address",
                    ),
                ),
                (
                    "error",
                    accelerator.models.fields.TextNullField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="error",
                    ),
                ),
            ],
            options={
                "verbose_name": "sign up request",
                "verbose_name_plural": "sign up requests",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    accelerator.models.fields.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                (
                    "is_localhost",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="localhost?"
                    ),
                ),
                (
                    "added_on",
                    accelerator.models.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created at",
                    ),
                ),
                (
                    "modified_on",
                    accelerator.models.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="updated at",
                    ),
                ),
                ("title", models.TextField(verbose_name="title")),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("Information", "Information"),
                            ("Warning", "Warning"),
                            ("Danger", "Danger"),
                        ],
                        default="Information",
                        max_length=50,
                        verbose_name="level",
                    ),
                ),
                ("content", models.TextField(verbose_name="content")),
                (
                    "user",
                    models.ForeignKey(
                        default=accelerator.users.utils.get_sentinel_user,
                        editable=False,
                        on_delete=models.SET(
                            accelerator.users.utils.get_deleted_user
                        ),
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "notification",
                "verbose_name_plural": "notifications",
            },
        ),
        migrations.CreateModel(
            name="Device",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    accelerator.models.fields.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                (
                    "is_localhost",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="localhost?"
                    ),
                ),
                (
                    "added_on",
                    accelerator.models.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created at",
                    ),
                ),
                (
                    "modified_on",
                    accelerator.models.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="updated at",
                    ),
                ),
                (
                    "user_agent",
                    accelerator.models.fields.TextNullField(
                        blank=True,
                        default=None,
                        null=True,
                        verbose_name="user agent",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        null=True,
                        unpack_ipv4=True,
                        verbose_name="ip address",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=accelerator.users.utils.get_sentinel_user,
                        editable=False,
                        on_delete=models.SET(
                            accelerator.users.utils.get_deleted_user
                        ),
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "device",
                "verbose_name_plural": "devices",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="accounts.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
